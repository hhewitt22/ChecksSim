<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Particle Filter Simulation</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      margin: 0;
      display: flex;
      flex-direction: row;
      height: 100vh;
      background: #f4f7fa;
    }
     #simulation {
       background: linear-gradient(to bottom, #f3f4f6, #e5e7eb);
    }

    #controls {
      flex: 1;
      padding: 20px;
      overflow-y: auto;
      background: #ffffff;
      box-shadow: inset 0 0 8px rgba(0, 0, 0, 0.05);
      border-radius: 0 10px 10px 0;
    }
    h3 {
      border-bottom: 1px solid #ddd;
      padding-bottom: 4px;
      margin-top: 20px;
      color: #333;
    }
    .filterControl {
      margin-bottom: 15px;
    }
    button {
      padding: 10px 14px;
      margin-right: 8px;
      margin-top: 10px;
      background-color: #2563eb;
      color: white;
      font-weight: 600;
      border: none;
      border-radius: 8px;
      cursor: pointer;
    }
    button:hover {
      background-color: #1e40af;
    }
    select {
      padding: 6px;
      border-radius: 6px;
      border: 1px solid #ccc;
      margin-left: 8px;
    }
    canvas {
      display: block;
      border-radius: 0 0 0 10px;
    }
    .metrics {
      font-size: 0.9em;
      background: #f0f0f0;
      padding: 10px;
      border-radius: 6px;
    }
    #integrityScore {
      font-size: 1.2em;
      font-weight: bold;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <div id="simulation">
    <canvas id="simCanvas" width="800" height="400"></canvas>
  </div>
  <div id="controls">
    <h3>Filter Controls</h3>
    <div id="filterControls"></div>
    <button onclick="addFilter()">Add Filter</button>
    <button onclick="removeFilter()">Remove Filter</button>
    <button onclick="resetSim()">Reset</button>
    <button onclick="startSim()">Start</button>
    <button onclick="pauseSim()">Pause</button>
    <h3>Metrics</h3>
    <div class="metrics" id="metricsPane"></div>
    <h3>Particle Outcomes</h3>
<canvas id="barGraph" width="300" height="200" style="background: #fff; border: 1px solid #ccc; border-radius: 6px;"></canvas>
<h3>Integrity Score</h3>
    <div id="integrityScore"></div>
  </div>
  <script>
    const canvas = document.getElementById('simCanvas');
    const ctx = canvas.getContext('2d');

    const COLORS = ['#FFD700', '#FFA500', '#FF4500', '#1E90FF', '#DC143C'];
    const FILTER_COLORS = ['#34D399', '#FACC15', '#FB923C', '#EF4444'];
    const passChances = [
      [0.99, 0.99, 0.97, 0.95],
      [0.99, 0.8, 0.4, 0.1],
      [0.95, 0.6, 0.2, 0.02],
      [0.5, 0.1, 0.05, 0.01],
      [0.1, 0.05, 0.01, 0.005]
    ];
    const capacities = [10, 8, 6, 4];
    const particleRate = 9;

    let filters = [2];
    let particles = [];
    let lastSpawn = 0;
    let filterStates = [];
    let running = true;

    function addFilter() {
      if (filters.length < 4) {
        filters.push(2);
        resetFilterStates();
        renderFilterControls();
      }
    }

    function removeFilter() {
      if (filters.length > 1) {
        filters.pop();
        resetFilterStates();
        renderFilterControls();
      }
    }

    function resetSim() {
      particles = [];
      resetFilterStates();
    }

    function startSim() {
      running = true;
    }

    function pauseSim() {
      running = false;
    }

    function resetFilterStates() {
      filterStates = filters.map(() => ({ count: 0, lastTime: Date.now(), clogged: false, clogStart: 0 }));
    }

    function renderFilterControls() {
      const container = document.getElementById('filterControls');
      container.innerHTML = '';
      filters.forEach((filter, idx) => {
        const div = document.createElement('div');
        div.className = 'filterControl';
        div.innerHTML = `Filter ${idx + 1}: 
          <select onchange="changeFilter(${idx}, this.value)">
            <option value="1" ${filter === 1 ? 'selected' : ''}>Coarse</option>
            <option value="2" ${filter === 2 ? 'selected' : ''}>Moderate</option>
            <option value="3" ${filter === 3 ? 'selected' : ''}>Fine</option>
            <option value="4" ${filter === 4 ? 'selected' : ''}>Extra Fine</option>
          </select>`;
        container.appendChild(div);
      });
    }

    function changeFilter(idx, value) {
      filters[idx] = parseInt(value);
      resetFilterStates();
    }

    function spawnParticle() {
      const size = Math.floor(Math.random() * 5);
      particles.push({
        id: Math.random(),
        size,
        color: COLORS[size],
        x: 0,
        y: Math.random() * canvas.height,
        stuck: false,
        stoppedByClog: false,
        passed: []
      });
    }

    function updateParticles() {
      const now = Date.now();
      filterStates.forEach((state, i) => {
        const cap = capacities[filters[i] - 1];
        if (now - state.lastTime > 1000) {
          state.count = 0;
          state.lastTime = now;
        }
        if (state.clogged && now - state.clogStart > 5000) {
          state.clogged = false;
        }
      });

      const spacing = canvas.width / (filters.length + 1);
      for (let p of particles) {
        if (p.stuck) continue;
        p.x += 1;
        for (let i = 0; i < filters.length; i++) {
          const fx = (i + 1) * spacing;
          const fSize = filters[i];
          const fState = filterStates[i];

          if (p.x >= fx && !p.passed.includes(i)) {
            const overCap = fState.count >= capacities[fSize - 1];
            if (overCap && !fState.clogged) {
              fState.clogged = true;
              fState.clogStart = now;
            }
            const mod = fState.clogged ? 0.5 : 1;
            const chance = passChances[p.size][fSize - 1] * mod;
            if (Math.random() <= chance) {
              p.passed.push(i);
              fState.count++;
            } else {
              p.stuck = true;
              p.stoppedByClog = fState.clogged;
            }
            break;
          }
        }
      }
    }

    function drawParticles() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const spacing = canvas.width / (filters.length + 1);
      filters.forEach((fSize, i) => {
        const x = (i + 1) * spacing;
        ctx.fillStyle = filterStates[i].clogged ? '#9ca3af' : FILTER_COLORS[fSize - 1];
        ctx.fillRect(x - 1.5, 0, 3, canvas.height);
      });

      for (let p of particles) {
        ctx.beginPath();
       ctx.fillStyle = p.stuck
  ? (p.stoppedByClog ? '#6b7280' : p.color)
  : p.color;

        const radius = 4 + p.size * 2;
        ctx.globalAlpha = p.stuck ? 0.4 : 1;
        ctx.arc(p.x, p.y, radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.globalAlpha = 1;
      }
    }

    function updateMetrics() {
      const total = particles.length;
      const passed = particles.filter(p => !p.stuck && p.passed.length === filters.length).length;
      const blocked = particles.filter(p => p.stuck).length;
      const clogged = particles.filter(p => p.stuck && p.stoppedByClog).length;

      const colorCount = [0, 0, 0, 0, 0];
      const passedCount = [0, 0, 0, 0, 0];
      particles.forEach(p => {
        colorCount[p.size]++;
        if (!p.stuck && p.passed.length === filters.length) passedCount[p.size]++;
      });

      const integrity = Math.round(100 * (
        (passedCount[0] / (colorCount[0] || 1)) * 0.7 +
        (1 - (passedCount.slice(1).reduce((a, b) => a + b, 0)) / (colorCount.slice(1).reduce((a, b) => a + b, 0) || 1)) * 0.3
      ));

      const scoreEl = document.getElementById('integrityScore');
      scoreEl.innerText = integrity + '%';
      if (integrity >= 79) scoreEl.style.color = '#10b981';
      else if (integrity >= 50) scoreEl.style.color = '#f59e0b';
      else scoreEl.style.color = '#ef4444';

      document.getElementById('metricsPane').innerText = `
        Total: ${total}

        Passed: ${passed}

        Blocked: ${blocked}

        Blocked by clog: ${clogged}`;
    }
function drawBarGraph() {
  const canvas = document.getElementById('barGraph');
  const ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  const sizes = ['Tiny', 'Small', 'Medium', 'Large']; // indexes 0-3 (ignore 4 if unused)
  const totalHeight = canvas.height;
  const midline = totalHeight / 2;
  const barWidth = 50;
  const spacing = 20;

  for (let i = 0; i < 4; i++) {
    const total = particles.filter(p => p.size === i).length;
    const passed = particles.filter(p => p.size === i && !p.stuck && p.passed.length === filters.length).length;
    const blocked = total - passed;

    const passPct = total > 0 ? passed / total : 0;
    const blockPct = 1 - passPct;

    const x = i * (barWidth + spacing) + spacing;

    // Draw red block (downward from midline)
    ctx.fillStyle = '#ef4444';
    ctx.fillRect(x, midline, barWidth, blockPct * midline);

    // Draw green pass (upward from midline)
    ctx.fillStyle = '#10b981';
    ctx.fillRect(x, midline - (passPct * midline), barWidth, passPct * midline);

    // Label
    ctx.fillStyle = '#374151';
    ctx.font = '12px Inter';
    ctx.textAlign = 'center';
    ctx.fillText(sizes[i], x + barWidth / 2, canvas.height - 5);
  }

  // Draw midline
  ctx.strokeStyle = '#000';
  ctx.beginPath();
  ctx.moveTo(0, midline);
  ctx.lineTo(canvas.width, midline);
  ctx.stroke();
}

    function tick() {
      const now = Date.now();
      if (running && now - lastSpawn > 100) {
        spawnParticle();
        lastSpawn = now;
      }
      updateParticles();
      drawParticles();
      updateMetrics();
      drawBarGraph();
      requestAnimationFrame(tick);
    }

    renderFilterControls();
    resetFilterStates();
    tick();
  </script>
</body>
</html>
